// supabase-config.js - VERS√ÉO CORRIGIDA COMPLETA
let supabase = null;

function initializeSupabase() {
    try {
        console.log('üîÑ Tentando inicializar Supabase...');
        
        // Verificar se ENV est√° dispon√≠vel
        if (typeof ENV === 'undefined') {
            console.error('‚ùå ENV n√£o definido - arquivo env.js n√£o foi carregado');
            return null;
        }
        
        console.log('‚úÖ ENV encontrado:', {
            hasUrl: !!ENV.SUPABASE_URL,
            hasKey: !!ENV.SUPABASE_ANON_KEY,
            urlLength: ENV.SUPABASE_URL ? ENV.SUPABASE_URL.length : 0,
            keyLength: ENV.SUPABASE_ANON_KEY ? ENV.SUPABASE_ANON_KEY.length : 0
        });

        // Configura√ß√£o do Supabase
        const SUPABASE_URL = ENV.SUPABASE_URL;
        const SUPABASE_ANON_KEY = ENV.SUPABASE_ANON_KEY;

        // Verificar se as vari√°veis foram carregadas
        if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
            console.error('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas');
            console.log('URL:', SUPABASE_URL);
            console.log('KEY:', SUPABASE_ANON_KEY ? 'Presente' : 'Ausente');
            return null;
        }

        // Verificar se a biblioteca Supabase est√° carregada
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Biblioteca Supabase n√£o carregada');
            return null;
        }

        // Criar cliente Supabase
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        if (!supabase) {
            console.error('‚ùå Falha ao criar cliente Supabase');
            return null;
        }
        
        console.log('‚úÖ Supabase inicializado com sucesso');
        return supabase;
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Supabase:', error);
        return null;
    }
}

// Verificar conex√£o
async function testarConexao() {
    try {
        if (!supabase) {
            console.error('‚ùå Supabase n√£o foi inicializado');
            return false;
        }
        
        console.log('üîÑ Testando conex√£o com banco...');
        
        const { data, error } = await supabase.from('crismandos').select('count');
        if (error) {
            console.error('‚ùå Erro na consulta:', error);
            throw error;
        }
        
        console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
        return true;
    } catch (error) {
        console.error('‚ùå Erro na conex√£o com Supabase:', error);
        return false;
    }
}

// Fun√ß√£o para obter cliente Supabase
function getSupabaseClient() {
    return supabase;
}
